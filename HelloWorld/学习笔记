
一、教程
   1、自强学堂：http://code.ziqiangxuetang.com/django/django-intro.html
   2、django教程：http://www.runoob.com/django/django-tutorial.html

二、资源下载
   1、Python 下载地址：https://www.python.org/downloads/
   2、Django 下载地址：https://www.djangoproject.com/download/

三、第一个Django工程：HelloWorld
|-- HelloWorld
|   |-- __init__.py
|   |-- settings.py
|   |-- urls.py
|   `-- wsgi.py
`-- manage.py

1、目录说明：
HelloWorld: 项目的容器。
manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。
HelloWorld/__init__.py: 一个空文件，告诉 Python 该目录是一个 Python 包。
HelloWorld/settings.py: 该 Django 项目的设置/配置。
HelloWorld/urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站"目录"。
HelloWorld/wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。

2、django目录
urls.py
网址入口，关联到对应的views.py中的一个函数（或者generic类），访问网址就对应一个函数。
views.py
处理用户发出的请求，从urls.py中对应过来, 通过渲染templates中的网页可以将显示内容，比如登陆后的用户名，用户请求的数据，输出到网页。
models.py
与数据库操作相关，存入或读取数据时用到这个，当然用不到数据库的时候 你可以不使用。
forms.py
表单，用户在浏览器上输入数据提交，对数据的验证工作以及输入框的生成等工作，当然你也可以不使用。
templates 文件夹
views.py 中的函数渲染templates中的Html模板，得到动态内容的网页，当然可以用缓存来提高速度。
admin.py
后台，可以用很少量的代码就拥有一个强大的后台。
settings.py
Django 的设置，配置文件，比如 DEBUG 的开关，静态文件的位置等。
四、知识点
1、Django简介：
http://www.cnblogs.com/shaosks/p/7237809.html
Django 应该是最出名的Python框架，GAE甚至Erlang都有框架受它影响。Django是走大而全的方向，它最出名的是其全自动化的管理后台：只需要使用起ORM，做简单的对象定义，它就能自动生成数据库结构、以及全功能的管理后台。
2、搭建多个互不干扰的开发环境
  2.1 主要用到的工具是：virtualenv
  2.2 安装方法：http://code.ziqiangxuetang.com/django/django-install.html
       2.2.1 windows:  pip install virtualenvwrapper-win
       2.2.2 linux: sudo pip install virtualenv virtualenvwrapper
  2.3 使用方法：
       mkvirtualenv zqxt(环境名称，自定义)：创建运行环境zqxt
       workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境
       deactivate: 退出终端环境
       其它的：
       rmvirtualenv ENV：删除运行环境ENV
       mkproject mic：创建mic项目和运行环境mic
       mktmpenv：创建临时运行环境
       lsvirtualenv: 列出可用的运行环境
       lssitepackages: 列出当前环境安装了的包
3、django常用命令
  3.1 新建一个django project
      命令：django-admin.py startproject project_name
      注意 project_name 是自己的项目名称，需要为合法的 Python 包名，如不能为 1a 或 a-b。
  3.2 新建app
      要先进入项目目录下，cd project_name 然后执行下面的命令（下同，已经在项目目录下则不需要 cd project_name）
      命令：python manage.py startapp app_name
            或 django-admin.py startapp app_name
      说明：一般一个项目有多个app, 当然通用的app也可以在多个项目中使用。与项目名类似 app name 也需要为合法的 Python 包名，如 blog，news, aboutus 等都是合法的 app 名称。
  3.3 创建数据库表 或 更改数据库表或字段
      3.3.1 创建更改的文件：python manage.py makemigrations
      3.3.2 将生成的py文件应用到数据库：python manage.py migrate
  3.4 使用开发服务器
      说明：开发服务器，即开发时使用，一般修改代码后会自动重启，方便调试和开发，但是由于性能问题，建议只用来测试，不要用在生产环境。
      命令：
           python manage.py runserver
           # 当提示端口被占用的时候，可以用其它端口：
           python manage.py runserver 8001
           python manage.py runserver 9999
          （当然也可以kill掉占用端口的进程，具体后面有讲，此处想知道的同学可查下 lsof 命令用法）
           # 监听机器所有可用 ip （电脑可能有多个内网ip或多个外网ip）
           python manage.py runserver 0.0.0.0:8000
           # 如果是外网或者局域网电脑上可以用其它电脑查看开发服务器
           # 访问对应的 ip加端口，比如 http://172.16.20.2:8000
  3.5 清空数据库
      命令：python manager.py flush
      说明：此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表。
  3.6 创建超级管理员
      命令：python manage.py createsuperuser
            # 按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填
            # 修改 用户密码可以用：
            python manage.py changepassword username
  3.7 导出数据 导入数据
      命令：python manage.py dumpdata appname > appname.json
            python manage.py loaddata appname.json
  3.8 Django 项目环境终端
      命令：python manage.py shell
      说明：如果你安装了 bpython 或 ipython 会自动用它们的界面，推荐安装 bpython。
            这个命令和 直接运行 python 或 bpython 进入 shell 的区别是：你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据，还有一些小测试非常方便。
  3.9 数据库命令行
      命令：python manage.py dbshell
      说明：Django 会自动进入在settings.py中设置的数据库，如果是 MySQL 或 postgreSQL,会要求输入数据库用户密码。
            在这个终端可以执行数据库的SQL语句。如果您对SQL比较熟悉，可能喜欢这种方式。
  3.10 更多命令
      命令：终端上输入 python manage.py 可以看到详细的列表，在忘记子名称的时候特别有用。
4、新建一个应用(app)
  4.1 进入到自己的工作目录，执行命令：python manager.py startapp app_name（应用名称）
  4.2 目录结构：
   app_name/
  ├── __init__.py
  ├── admin.py
  ├── apps.py
  ├── models.py
  ├── tests.py
  ├── views.py
  └── migrations
      ├── _init__.py





